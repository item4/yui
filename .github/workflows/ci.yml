name: Run test, lint check and deploy

on:
  - push
  - pull_request

jobs:
  check-coding-convention:
    name: Check Coding Convention
    runs-on: ubuntu-latest
    steps:
      # Set-up
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      # Install Dependencies
      - name: Install Checkers
        run: pip install black flake8 flake8-import-order zimports

      # Lint
      - name: Check coding convention
        run: flake8 yui tests
      - name: Check missing autofix
        run: black --check .
      - name: Check import convention
        run: ./check_zimports.sh

  test-program:
    name: Test Program
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kirito
          POSTGRES_PASSWORD: eugeo
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      memcached:
        image: memcached
        ports:
          - 11211:11211

    steps:
      # Set-up
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.0
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Install Dependencies
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          poetry export -o requirements.txt --dev --without-hashes
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      # Fix PATH
      - name: Fix PATH
        run: echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      # Type Check
      - name: Edit mypy.ini for disable color output
        run: echo "color_output=False" >> mypy.ini
      - name: Check static types
        run: mypy yui

      # Test
      - name: Run test cases
        run: pytest -v --cov=yui --cov-report=xml tests
        env:
          YUI_TEST_DATABASE_URL: postgresql://kirito:eugeo@localhost/test
          AQI_API_TOKEN: ${{ secrets.TEST_AQI_API_TOKEN }}
          GOOGLE_API_KEY: ${{ secrets.TEST_GOOGLE_API_KEY }}
          NAVER_CLIENT_ID: ${{ secrets.TEST_NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.TEST_NAVER_CLIENT_SECRET }}

      # After jobs
      - name: Export Python dependencies for build Docker image
        run: |
          poetry export -o requirements.txt --dev --without-hashes
      - name: Archive requirements.txt file
        uses: actions/upload-artifact@v2
        with:
          name: python-deps
          path: requirements.txt
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [check-coding-convention, test-program]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: item4
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get stored requirements.txt
        uses: actions/download-artifact@v2
        with:
          name: python-deps
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: item4/yui:latest
          cache-from: type=registry,ref=item4/yui:latest
          cache-to: type=inline
