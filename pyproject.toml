[tool.black]
line-length = 80
preview = true


[tool.ruff]
line-length = 120
target-version = "py312"


[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-async
    "ASYNC",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pie
    "PIE",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-use-pathlib
    "PTH",
    # Pylint
    "PLE",
    "PLR0133",
    "PLR0206",
    "PLR0402",
    "PLR1701",
    "PLR1711",
    "PLR1722",
    "PLR5501",
    "PLW",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # Ruff-specific rules
    "RUF",
]
ignore = [
    # flake8-async
    "ASYNC102",  # Checks that async functions do not contain calls to blocking synchronous process calls via the os module.
    # flake8-bandit
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
    # flake8-pytest-style
    "PT011",  # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    # tryceratops
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY301",  # Abstract raise to an inner function
    # pyupgrade
    "UP040",  # Type alias {name} uses TypeAlias annotation instead of the type keyword - mypy does not support this yet
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # flake8-bandit
    "S101",  # Use of assert detected
]

[tool.ruff.lint.isort]
force-single-line = true  # 한 줄 당 1개의 import 문
order-by-type = false  # 모두 대문자인 요소를 우선정렬하는 부분 비활성화
case-sensitive = true  # 대소문자 구분을 켜야 대문자 요소가 우선정렬됨
known-first-party = ["yui"]
section-order = ["future", "standard-library", "third-party", "tests", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
tests = ["tests"]

[tool.pytest.ini_options]
asyncio_mode = "auto"


[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
warn_unused_ignores = true  # Warns about unneeded # type: ignore comments.
show_error_codes = true
plugins = [
    "yui.mypy_plugin",
]


[tool.poetry]
name = "yui"
version = "0.0.0"
description = "YUI is Multi-purpose Slack Bot."
authors = ["Kim, Jin Su <item4@localhost.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
Babel = "^2.14.0"
SQLAlchemy = {version = "^2.0.25", extras = ["asyncio"]}
SQLAlchemy-Utils = "^0.41.1"
aiocron = "^1.8"
aiohttp = "^3.9.3"
alembic = "^1.13.1"
async-timeout = "^4.0.3"
attrdict = "^2.0.1"
attrs = "^23.2.0"
click = "^8.1.7"
cssselect = "^1.2.0"
defusedxml = "^0.7.1"
feedparser = "^6.0.11"
lxml = "^4.9.4"
more-itertools = "^10.2.0"
orjson = "^3.9.13"
psycopg = {version = "^3.1.18", extras = ["binary"]}
pyppeteer = "^1.0.2"
python-dateutil = "^2.8.2"
rapidfuzz = "^3.6.1"
redis = {version = "^5.0.1", extras = ["hiredis"]}
scipy = "^1.12.0"
sympy = "^1.12"
tossi = "^0.3.1"
tzlocal = "^5.2"

[tool.poetry.group.dev.dependencies]
aioresponses = "^0.7.6"
black = "^24.1.1"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
pytest = "^7.4.4"
pytest-asyncio = "^0.23.4"
pytest-cov = "^4.1.0"
ruff = "^0.2.0"
time-machine = "^2.13.0"
types-orjson = "^3.6.2"
types-python-dateutil = "^2.8.19"
types-tzlocal = "^5.1.0"
yarl = "^1.9.4"

[tool.poetry.scripts]
yui = "yui.cli:main"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
